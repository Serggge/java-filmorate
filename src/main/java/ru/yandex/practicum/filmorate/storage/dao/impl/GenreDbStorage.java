package ru.yandex.practicum.filmorate.storage.dao.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import ru.yandex.practicum.filmorate.exception.DataBaseResponseException;
import ru.yandex.practicum.filmorate.model.Genre;
import ru.yandex.practicum.filmorate.storage.dao.GenreStorage;
import static ru.yandex.practicum.filmorate.Constants.GENRE_ROW_MAPPER;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@Repository("genreDbStorage")
public class GenreDbStorage implements GenreStorage {

    private final JdbcTemplate jdbcTemplate;
    private final NamedParameterJdbcTemplate namedParameterJdbcTemplate;
    private String sqlQuery;

    @Autowired
    public GenreDbStorage(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);
    }

    @Override
    public Genre save(Genre genre) {
        if (genre.getId() == 0) {
            sqlQuery = "INSERT INTO genres (name) VALUES (:name)";
        } else {
            sqlQuery = "UPDATE genres SET name = :name WHERE genre_id = :id";
        }
        KeyHolder keyHolder = new GeneratedKeyHolder();
        SqlParameterSource genreParams = new BeanPropertySqlParameterSource(genre);
        int rowsAffected = namedParameterJdbcTemplate.update(sqlQuery, genreParams, keyHolder);
        if (rowsAffected == 0) {
            throw new DataBaseResponseException("При записи в БД произошла ошибка. Данные не записаны.");
        } else if (genre.getId() == 0) {
            int autoGeneratedKey = Objects.requireNonNull(keyHolder.getKey()).intValue();
            genre.setId(autoGeneratedKey);
        }
        return genre;
    }

    @Override
    public Optional<Genre> findById(long id) {
        sqlQuery = "SELECT * FROM genres WHERE genre_id = ?";
        try {
            return Optional.ofNullable(jdbcTemplate.queryForObject(sqlQuery, GENRE_ROW_MAPPER, id));
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public List<Genre> findAll() {
        sqlQuery = "SELECT * FROM genres ORDER BY genre_id";
        try {
            return jdbcTemplate.query(sqlQuery, GENRE_ROW_MAPPER);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        }
    }

    @Override
    public boolean existsById(long id) {
        return findById(id).isPresent();
    }

}
