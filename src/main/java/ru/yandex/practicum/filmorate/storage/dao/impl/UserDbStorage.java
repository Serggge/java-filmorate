package ru.yandex.practicum.filmorate.storage.dao.impl;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import ru.yandex.practicum.filmorate.exception.DataBaseResponseException;
import ru.yandex.practicum.filmorate.model.User;
import ru.yandex.practicum.filmorate.storage.UserStorage;
import java.util.*;
import static ru.yandex.practicum.filmorate.Constants.USER_ROW_MAPPER;

@Repository("userDbStorage")
public class UserDbStorage implements UserStorage {

    private final JdbcTemplate jdbcTemplate;
    private final NamedParameterJdbcTemplate namedParameterJdbcTemplate;
    private String sqlQuery;

    public UserDbStorage(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);
    }

    @Override
    public User save(User user) {
        if (user.getId() == 0) {
            sqlQuery = "INSERT INTO users (login, email, name, birthday) VALUES (:login, :email, :name, :birthday)";
        } else {
            sqlQuery = "UPDATE users SET login = :login, email = :email, name = :name, birthday = :birthday " +
                         "WHERE user_id = :id";
        }
        SqlParameterSource userParams = new BeanPropertySqlParameterSource(user);
        KeyHolder keyHolder = new GeneratedKeyHolder();
        int affectedRows = namedParameterJdbcTemplate.update(sqlQuery, userParams, keyHolder);
         if (affectedRows == 0) {
             throw new DataBaseResponseException(
                     String.format("При попытке добавить пользователя с id=%d произошла ошибка", user.getId())
             );
         } else if (user.getId() == 0) {
             long autoGeneratedKey = Objects.requireNonNull(keyHolder.getKey()).longValue();
             user.setId(autoGeneratedKey);
         }
        return user;
    }

    @Override
    public Optional<User> findById(long id) {
        sqlQuery = "SELECT * FROM users WHERE user_id = ?";
        try {
            return Optional.ofNullable(jdbcTemplate.queryForObject(sqlQuery, USER_ROW_MAPPER, id));
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public List<User> findAll() {
        sqlQuery = "SELECT * FROM users ORDER BY user_id";
        try {
            return jdbcTemplate.query(sqlQuery, USER_ROW_MAPPER);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        }
    }

    @Override
    public List<User> findAllById(Collection<Long> ids) {
        sqlQuery = "SELECT * FROM users WHERE user_id = ?";
        List<User> result = new ArrayList<>();
        for (Long id : ids) {
            result.add(jdbcTemplate.queryForObject(sqlQuery, USER_ROW_MAPPER, id));
        }
        return result;
    }

    public void deleteById(long id) {
        sqlQuery = "DELETE FROM users WHERE user_id = ?";
        int rowNums = jdbcTemplate.update(sqlQuery, id);
        if (rowNums == 0) {
            throw new DataBaseResponseException("User not found: id=" + id);
        }
    }

    public void deleteAllById(Collection<Long> ids) {
        sqlQuery = "DELETE FROM users WHERE user_id IN (?)";
        for (Long id : ids) {
            jdbcTemplate.update(sqlQuery, id);
        }
    }

    public void deleteAll(Collection<User> users) {
        LinkedList<Long> ids = new LinkedList<>();
        for (User user : users) {
            ids.addLast(user.getId());
        }
        deleteAllById(ids);
    }

    @Override
    public boolean existsById(long id) {
        return findById(id).isPresent();
    }

}
