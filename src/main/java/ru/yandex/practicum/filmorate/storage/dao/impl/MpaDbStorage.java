package ru.yandex.practicum.filmorate.storage.dao.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import ru.yandex.practicum.filmorate.exception.DataBaseResponseException;
import ru.yandex.practicum.filmorate.model.Mpa;
import ru.yandex.practicum.filmorate.storage.dao.MpaStorage;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import static ru.yandex.practicum.filmorate.Constants.MPA_ROW_MAPPER;

@Repository("mpaDbStorage")
public class MpaDbStorage implements MpaStorage {

    private final JdbcTemplate jdbcTemplate;
    private final NamedParameterJdbcTemplate namedParameterJdbcTemplate;
    private String sqlQuery;

    @Autowired
    public MpaDbStorage(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);
    }

    @Override
    public Mpa save(Mpa mpa) {
        if (mpa.getId() == 0) {
            sqlQuery = "INSERT INTO mpa (name) VALUES (:name)";
        } else {
            sqlQuery = "UPDATE mpa SET mpa_id = :id, name = :name";
        }
        SqlParameterSource mpaParams = new BeanPropertySqlParameterSource(mpa);
        KeyHolder keyHolder = new GeneratedKeyHolder();
        int rowsAffected = namedParameterJdbcTemplate.update(sqlQuery, mpaParams, keyHolder);
        if (rowsAffected == 0) {
            throw new DataBaseResponseException(
                    String.format("При попытке добавить рейтинг MPA с id=%d произошла ошибка", mpa.getId())
            );
        } else if (mpa.getId() == 0) {
            int autoGeneratedKey = Objects.requireNonNull(keyHolder.getKey()).intValue();
            mpa.setId(autoGeneratedKey);
        }
        return mpa;
    }

    @Override
    public Optional<Mpa> findById(long id) {
        sqlQuery = "SELECT * FROM mpa WHERE mpa_id = ?";
        try {
            return Optional.ofNullable(jdbcTemplate.queryForObject(sqlQuery, MPA_ROW_MAPPER, id));
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public List<Mpa> findAll() {
        sqlQuery = "SELECT * FROM mpa ORDER BY mpa_id";
        return jdbcTemplate.query(sqlQuery, MPA_ROW_MAPPER);
    }

    @Override
    public boolean existsById(long id) {
        return findById(id).isPresent();
    }

}
