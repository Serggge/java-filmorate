create TABLE IF NOT EXISTS mpa (
	mpa_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name varchar(30) NOT NULL UNIQUE
);

create TABLE IF NOT EXISTS films (
	film_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name varchar(255) NOT NULL,
	description varchar(1000) NOT NULL,
	release_date date NOT NULL,
	duration int NOT NULL,
	mpa_id int REFERENCES mpa (mpa_id) ON delete CASCADE,
CONSTRAINT release_after_first_film CHECK (release_date > '1895-12-28'),
CONSTRAINT film_not_blank_fields CHECK (name <> ''AND description <> '' AND duration > 0)
);

create TABLE IF NOT EXISTS genres (
	genre_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name varchar(255) NOT NULL UNIQUE
);

drop table IF EXISTs directors CASCADE;
create TABLE  directors (
	id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name varchar(255) NOT NULL
);

drop table IF EXISTs film_directors CASCADE;
create TABLE  film_directors (
	film_id int REFERENCES films (film_id) ON delete CASCADE,
	director_id int REFERENCES directors (id) ON delete CASCADE,
CONSTRAINT pk_film_directors PRIMARY KEY (film_id, director_id)
);

create TABLE IF NOT EXISTS film_genre (
	film_id int REFERENCES films (film_id) ON delete CASCADE,
	genre_id int REFERENCES genres (genre_id) ON delete CASCADE,
CONSTRAINT pk_fields_film_genre PRIMARY KEY (film_id, genre_id)
);

create TABLE IF NOT EXISTS users (
	user_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	login varchar(100) NOT NULL UNIQUE,
	email varchar(100) NOT NULL UNIQUE,
	name varchar(100),
	birthday date NOT NULL,
CONSTRAINT users_not_blank_fields CHECK (login <> '' AND email <> ''),
CONSTRAINT birthday_past CHECK (birthday < NOW())
);

create TABLE IF NOT EXISTS friends (
	user_id int NOT NULL REFERENCES users (user_id) ON delete CASCADE,
	friend_id int NOT NULL REFERENCES users (user_id) ON delete CASCADE,
	confirmed boolean DEFAULT false,
CONSTRAINT pk_fields_friends PRIMARY KEY (user_id, friend_id)
);

create TABLE IF NOT EXISTS likes (
	film_id int REFERENCES films (film_id) ON delete CASCADE,
	user_id int REFERENCES users (user_id) ON delete CASCADE,
CONSTRAINT pk_fields_likes PRIMARY KEY (film_id, user_id)
);

create index IF NOT EXISTS film_name_index ON films (name);

create index IF NOT EXISTS users_email_index ON users (login);

create index IF NOT EXISTS users_name_index ON users (name);